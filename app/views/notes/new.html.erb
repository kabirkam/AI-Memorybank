<%# this is the nav bar
<div class="nav d-flex profile justify-content-between align-items-center">
  <button class="button-85"><%= link_to "Inbox", notes_path %></button>
  <%# <button class="button-85"><%= link_to "Test", test_path</button> %>

  <%# <div class="avatar border-radius">
      <div class="grad border-radius spin"></div>
      <button type="button" data-toggle="modal" data-target="#exampleModalCenter">
        <img src="https://lh3.googleusercontent.com/a/AGNmyxYdZLRF4ONYN4IMCGDLA5-rxxvVnuPRAPAYI3op9Q=s192-c-rg-br100" class="avatar-img border-radius" />
      </button>
      </a>
    </div>
</div> %>


<%# this is a background img %>
<div class="stage">

  <div class="actor"></div>
  <div class="actor"></div>
  <div class="actor"></div>

    <div class="box d-flex">
      <div class="box-2 d-flex" id="mic-container">
        <button class="button rec-effect-4" id='mic-toggle'>
          <%# text display for the mic button %>
          <div class="mic-text">Tap to start</div>
          <i class="fa fa-microphone"></i>
        </button>
      </div>
    </div>
    <div class="recorder-box"></div>
</div>

 <%# hamburger nav bar bootsrap %>
<!--Navbar-->
<nav class="navbar navbar-light navbar-1 white navbar-top">

  <!-- Navbar brand -->
  <a class="navbar-brand" href="#">MyPensieve.ai</a>

  <!-- Collapse button -->
  <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent15"
    aria-controls="navbarSupportedContent15" aria-expanded="false" aria-label="Toggle navigation"><span class="navbar-toggler-icon"></span></button>

  <!-- Collapsible content -->
  <div class="collapse navbar-collapse" id="navbarSupportedContent15">

    <!-- Links -->
    <ul class="navbar-nav mr-auto">
      <li class="nav-item active">
        <%= link_to "Inbox", notes_path, class: "nav-link" %>
        <%# <a class="nav-link" href="">Home<span class="sr-only">(current)</span></a> %>
      </li>
      <li class="nav-item">
        <%# <a class="nav-link" href="#">Change Password</a> %>
        <%= link_to "Change password",edit_user_registration_path(current_user), class: "nav-link" %>
      </li>
      <li class="nav-item">
        <%# <a class="nav-link" href="#">Sign out</a> %>
        <%= link_to "Log out", destroy_user_session_path, class: "nav-link", data: {turbo_method: :delete} %>
      </li>
    </ul>

    <!-- Links -->

  </div>
  <!-- Collapsible content -->

</nav>
<!--/.Navbar-->

<!-- Modal bootstrap #1 - profile page click -->
<%# <div class="modal fade" id="exampleModalCenter" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered" role="document">
    <div class="modal-content">
      <div class="modal-body nav-menu">

      <ul class="menu">
      <li>
        Profile
        <ul class="sub-menu">
          <li>Change name</li>
          <li>Edit background image</li>
          <li>Edit profile image</li>
        </ul>
      </li>

      <li>
        Settings
        <ul class="sub-menu">
          <li>Language</li>
          <li>Note text type</li>
        </ul>
      </li>

      <li>
        Favorite notes
        <ul class="sub-menu">
        </ul>
      </li>

      <li>
        <%= link_to "Log out", destroy_user_session_path, class: "dropdown-item", data: {turbo_method: :delete} %>
        <%# <ul class="sub-menu">
        </ul>
      </li>
    </ul>


      </div>
    </div>
  </div>
</div> %>


<!-- Modal bootstrap #2 - voice recording confirmation -->
<div class="modal fade" id="exampleModalReminder" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <%# <div class="modal-header">
        <h5 class="modal-title" id="exampleModalLabel">Modal title</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div> %>
      <div class="modal-body" style='color: white;'>
        <p style='text-align: center'>âœ… your note was saved!</p>
        <p style='text-align: center'>Transcript is loading</p>
        <img src="https://cdn.dribbble.com/users/90627/screenshots/1096260/loading.gif" style="border: none; width: 100%;" alt="loading photo" >
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>

 <%# timer for the record button %>
<div class="timer" data-controller="timer" >
  <div class="inner-timer"></div>
</div>


<script src="https://cdn.jsdelivr.net/npm/circletype@2.3.0/dist/circletype.min.js"></script>
<script>
  // Html selectors
  var micToggle = document.querySelector("#mic-toggle"  );
  var micIcon = document.querySelector(".fa.fa-microphone");
  var micContainer = document.querySelector("#mic-container");
  var micText = document.querySelector(".mic-text");
  var time = document.getElementsByClassName("inner-timer")

  var timings = 60;
  var i = 1;
  var s = 0;
  var m = 0;
  var myInterval;

  // function to imagify the text in note.text
  function imagify(note)
    {
        // Make fetch request to Rails.
        const crsfToken = document.querySelector("meta[name='csrf-token']").content;
        fetch("/imagify", {
          method: "POST",
          headers: {"X-CSRF-Token": crsfToken, 'Content-Type': 'application/json'},
          body: JSON.stringify(note)
        });
    }

  // Records audio data into const
  var audioChunks = [];
  // Ask user for access to their microphone.
  navigator.mediaDevices.getUserMedia({ audio: true })
  .then(stream => {
    let mediaRecorder = new MediaRecorder(stream);
      mediaRecorder.addEventListener("dataavailable", (event) => {
        // record audio data into array
        audioChunks.push(event.data);
      });
      mediaRecorder.addEventListener("stop", () => {
        // Convert audioChunks into audioBlob.
        const audioBlob = new Blob(audioChunks, { type: 'audio/mpeg' })
        audioChunks.length = 0;

        // append the audioBlob to formData.
        const formData = new FormData();
        formData.append("files", audioBlob);

        // Make fetch request to Rails in order to transcribe.
        const crsfToken = document.querySelector("meta[name='csrf-token']").content;
        fetch("/transcript", {
          method: "POST",
          headers: {"X-CSRF-Token": crsfToken},
          body: formData
        })
        .then(response => response.json())
        .then(note => {
          imagify(note)
          })
        .then(note => window.location.href = `/notes/`);
      });

      function Timeup() {
        if (m > 0) {
          time[0].innerHTML = `${m.toString().padStart(1,'0')}m : ${s.toString().padStart(1,'0')}s : ${((timings*60+i)%100).toString().padStart(2,'0')}`;
        }
        else if (s > 0) {
          time[0].innerHTML = `${s.toString().padStart(1,'0')}s : ${((timings*60+i)%100).toString().padStart(2,'0')}`;
        }
        else {
          time[0].innerHTML = `0s : ${((timings*60+i)%100).toString().padStart(2,'0')}`;
        }

        i++;
        if (i > 99) {
          s++;
          i = 1;
        }
        if (s > 59) {
          s = 0
          m++;
          // i = 1;
        }
      }

      function circlefy() {
        const circleType = new CircleType(micText);
        circleType.radius(87).dir(1);
      }

      circlefy(micText)

      // EventListener to toggle recorder
       micToggle.addEventListener("click", ()=> {
          if (mediaRecorder.state == "inactive") {
            mediaRecorder.start()
            micIcon.style.color = "red";
            i=0; s=0; m=0;
            myInterval = setInterval(Timeup, 10);
            console.log(micText)
            micText.innerHTML = 'Tap to stop'
            micText.style.color = "red";
            window.onload = circlefy(micText)
            micToggle.setAttribute("data-bs-toggle", "modal");
            micToggle.setAttribute("data-bs-target", "#exampleModalReminder");
          } else {
            micIcon.style.color = "white";
            clearInterval(myInterval)
            micText.innerHTML = 'Tap to start'
            micText.style.color = "white";
            window.onload = circlefy(micText)
            micToggle.removeAttribute("data-bs-toggle");
            micToggle.removeAttribute("data-bs-target");
            mediaRecorder.stop();
          }
        })
    });
</script>
